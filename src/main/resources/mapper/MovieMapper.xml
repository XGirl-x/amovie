<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiao.amovie.repository.MovieRepository">
    <update id="update" parameterType="Movie">
        UPDATE `movie`
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="duration != null">duration = #{duration},</if>
            <if test="directors != null">directors = #{directors},</if>
            <if test="actors != null">actors = #{actors},</if>
            <if test="releaseDate != null">release_date = #{releaseDate},</if>
            <if test="plot != null">plot = #{plot},</if>
            <if test="poster != null">poster = #{poster},</if>
            <if test="country != null">country = #{country},</if>
            <if test="status != null">status = #{status}</if>
        </set>
        WHERE id = #{id}
    </update>

    <resultMap id="findMovieAndCategory" type="Movie">
        <id property="id" column="id" javaType="int"></id>
        <result property="name" column="name"></result>
        <result property="duration" column="duration"></result>
        <result property="directors" column="directors"></result>
        <result property="actors" column="actors"></result>
        <result property="releaseDate" column="release_date"></result>
        <result property="status" column="status"></result>
        <result property="plot" column="plot"></result>
        <result property="poster" column="poster"></result>
        <result property="country" column="country"></result>
        <collection property="categories" ofType="Category" column="id" select="selectCategoryofMovie">
            <id property="id" column="category_id"></id>
            <result property="name" column="category_name"></result>
        </collection>
    </resultMap>

    <resultMap id="findMovieAndCategories" type="com.xiao.amovie.from.MovieScore">
        <id property="id" column="id" javaType="int"></id>
        <result property="name" column="name"></result>
        <result property="duration" column="duration"></result>
        <result property="directors" column="directors"></result>
        <result property="actors" column="actors"></result>
        <result property="releaseDate" column="release_date"></result>
        <result property="status" column="status"></result>
        <result property="plot" column="plot"></result>
        <result property="poster" column="poster"></result>
        <result property="country" column="country"></result>
        <result property="avg" column="avg"></result>
        <result property="num" column="num"></result>
        <result property="rownum" column="rownum"></result>
        <collection property="categories" ofType="Category" column="id" select="selectCategoryofMovie">
            <id property="id" column="category_id"></id>
            <result property="name" column="category_name"></result>
        </collection>
    </resultMap>

    <select id="findMovieScore"  resultMap="findMovieAndCategories">
        SELECT `movie`.*,`sc`.`avg`,`sc`.`num` FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
    </select>

    <select id="findByMovieId" parameterType="int" resultMap="findMovieAndCategories">
        SELECT `movie`.*,`sc`.`avg`,`sc`.`num` FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            where id=#{id}
    </select>

    <select id="findMovieScoreSort" resultMap="findMovieAndCategories">
         SELECT `moviescore`.* ,(@i:=@i+1) AS rownum FROM (
         SELECT `movie`.*,`sc`.`avg`,`sc`.`num`FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            order BY `sc`.`avg` DESC) AS `moviescore`,(SELECT @i:=0) AS it
    </select>


    <select id="findById" resultMap="findMovieAndCategory" parameterType="int">
        select * from movie where id=#{id}
    </select>

    <select id="selectCategoryofMovie" parameterType="int" resultType="Category">
        SELECT category.`*` FROM movie_category LEFT JOIN category ON category.id=movie_category.category_id WHERE movie_id=#{movieId}
    </select>

    <select id="getAll" resultMap="findMovieAndCategory" parameterType="int">
        select * from movie
    </select>

    <select id="findByStatus" resultMap="findMovieAndCategories" parameterType="int">
        SELECT `moviescore`.* ,(@i:=@i+1) AS rownum FROM (
         SELECT `movie`.*,`sc`.`avg`,`sc`.`num`FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            order BY `sc`.`avg` DESC) AS `moviescore`,(SELECT @i:=0) AS it
            where `moviescore`.status = #{status}
    </select>

    <select id="findByName" resultMap="findMovieAndCategories" parameterType="String">
        SELECT `moviescore`.* ,(@i:=@i+1) AS rownum FROM (
         SELECT `movie`.*,`sc`.`avg`,`sc`.`num`FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            order BY `sc`.`avg` DESC) AS `moviescore`,(SELECT @i:=0) AS it
            where `moviescore`.name like concat('%', #{name} ,'%')
    </select>

    <select id="findByDirectors" resultMap="findMovieAndCategories" parameterType="String">
        SELECT `moviescore`.* ,(@i:=@i+1) AS rownum FROM (
         SELECT `movie`.*,`sc`.`avg`,`sc`.`num`FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            order BY `sc`.`avg` DESC) AS `moviescore`,(SELECT @i:=0) AS it
            where `moviescore`.directors like concat('%', #{directors} ,'%')
    </select>

    <select id="findByActors" resultMap="findMovieAndCategories" parameterType="String">
        SELECT `moviescore`.* ,(@i:=@i+1) AS rownum FROM (
         SELECT `movie`.*,`sc`.`avg`,`sc`.`num`FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            order BY `sc`.`avg` DESC) AS `moviescore`,(SELECT @i:=0) AS it
            where `moviescore`.actors like concat('%', #{actors} ,'%')
    </select>

    <select id="findByCountry" resultMap="findMovieAndCategories" parameterType="String">
        SELECT `moviescore`.* ,(@i:=@i+1) AS rownum FROM (
         SELECT `movie`.*,`sc`.`avg`,`sc`.`num`FROM `movie`
        LEFT JOIN (
	        SELECT `movie_id`,AVG(`score`) AS `avg`,COUNT(`user_id`) AS `num`
            FROM `scores` GROUP BY `movie_id`) AS `sc` ON `movie`.id=`sc`.`movie_id`
            order BY `sc`.`avg` DESC) AS `moviescore`,(SELECT @i:=0) AS it
            where `moviescore`.country like concat('%', #{country} ,'%')
    </select>

    <select id="findByCategoryId" resultMap="findMovieAndCategory" parameterType="int">
        select movie.* from movie,movie_category where movie_category.movie_id=movie.id and movie_category.category_id=#{categoryId}
    </select>

</mapper>
